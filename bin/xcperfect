#!/usr/bin/env ruby

if RUBY_VERSION < '2.0.0'
  abort 'error: XCPerfect requires Ruby 2.0.0 or higher.'
end

if $PROGRAM_NAME == __FILE__
  $LOAD_PATH.unshift File.expand_path('../../lib', __FILE__)
end

require 'xcperfect'
require 'optparse'
require 'json'

coverage_file_name = ''
coverage_targets = []

printer_options = {
  ascii: false,
  colorize: STDOUT.tty?,
  formatter: XCPerfect::All
}

OptionParser.new do |opts|
  opts.banner = 'Usage: xcrun xccov --json [options] | xcperfect'

  opts.on('-a', '--all', 'Show all code coverage information (Default)') do
    printer_options[:formatter] = XCPerfect::All
  end

  opts.on('-s', '--simple', 'Simplify coverage output') do
    printer_options[:formatter] = XCPerfect::Simple
  end

  opts.on('--[no-]color', 'Toggle colorized output. Default depends on your terminal') do |value|
    printer_options[:colorize] = value
  end

  opts.on('--ascii', 'Use characters in output. Default is false') do |value|
    printer_options[:ascii] = value
  end

  opts.on('-t', '--targets x,y', Array, 'Select targets to display code coverage data') do |targets|
    coverage_targets = targets
  end

  opts.on('-f', '--file FILENAME', 'Path to xccov generated json file') do |fname|
    coverage_file_name = fname
  end

  opts.on_tail('-h', '--help', 'Show this help message') do
    puts opts
    exit
  end

  opts.on_tail('-v', '--version', 'Show xcperfect version') do
    puts XCPerfect::VERSION
    exit
  end

  opts.parse!
end

json = nil
@colorize = printer_options[:colorize]

begin
  if coverage_file_name. == ''
    stdin = STDIN.gets
    if stdin.rstrip == ''
      XCPerfect.exit_with_error('No coverage data provided', printer_options[:colorize])
    end
    json = JSON.parse(stdin)
  else
    lines = File.readlines(coverage_file_name)
    if lines.length == 1
      json = JSON.parse(lines[0])
    else
      XCPerfect.exit_with_error('Input JSON should only be one line', printer_options[:colorize])
    end
  end
rescue
  XCPerfect.exit_with_error('Invalid JSON detected', printer_options[:colorize])
end

json['name'] = 'Total coverage'

if XCPerfect::Parser.new(json).verify
  printer = XCPerfect::Printer.new(printer_options, json)
  printer.pretty_print(coverage_targets)
else
  XCPerfect.exit_with_error('Provided JSON does not follow xccov json output format', printer_options[:colorize])
end
